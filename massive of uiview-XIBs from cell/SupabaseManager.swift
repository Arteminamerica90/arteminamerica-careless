// –§–∞–π–ª: SupabaseManager.swift
import Foundation
import Supabase

class SupabaseManager {
    
    // MARK: - Singleton
    
    /// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É Supabase.
    static let shared = SupabaseManager()

    /// –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º Supabase.
    let client: SupabaseClient

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
    private init() {
        // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å —É–∫–∞–∑–∞–Ω—ã –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ URL –∏ –∫–ª—é—á –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Supabase.
        let supabaseURL = URL(string: "https://pwlzlxxhozvaxgumeuqs.supabase.co")!
        let supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB3bHpseHhob3p2YXhndW1ldXFzIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjgzODMwMywiZXhwIjoyMDY4NDE0MzAzfQ.TbKaCvZhEAW9SAkJIYYSYnGsDN30D7K_LI_veiWYt-Y"

        self.client = SupabaseClient(supabaseURL: supabaseURL, supabaseKey: supabaseKey)
    }
    
    // MARK: - Paywall
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Paywall –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'paywalls' –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
    /// - Parameter identifier: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω—É–∂–Ω–æ–≥–æ paywall (–Ω–∞–ø—Ä–∏–º–µ—Ä, "default").
    /// - Returns: –û–±—ä–µ–∫—Ç `PaywallConfig` —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞.
    func fetchPaywallConfiguration(identifier: String) async throws -> PaywallConfig {
        let result: PaywallConfig = try await client
            .from("paywalls")
            .select()
            .eq("paywall_identifier", value: identifier)
            .single()
            .execute()
            .value
        
        return result
    }
    
    // MARK: - Group Activities
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ 1000 –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `group_activities`.
    /// - Returns: –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ `GroupActivity`.
    func fetchGroupActivities() async throws -> [GroupActivity] {
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π...")
        do {
            let activities: [GroupActivity] = try await client
                .from("group_activities")
                .select()
                .order("start_time", ascending: true)
                .limit(1000) // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä–∫—É –¥–æ 1000 –∑–∞–ø–∏—Å–µ–π ---
                .execute()
                .value
            
            print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(activities.count) –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (–ª–∏–º–∏—Ç 1000).")
            return activities
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: \(error.localizedDescription)")
            throw error
        }
    }
    
    // --- –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é ---
    /// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ.
    func fetchUserActivityCountForCurrentWeek(userId: String) async throws -> Int {
        let calendar = Calendar.current
        let today = Date()
        guard let weekInterval = calendar.dateInterval(of: .weekOfYear, for: today) else {
            throw NSError(domain: "DateError", code: 0, userInfo: [NSLocalizedDescriptionKey: "Could not calculate week interval"])
        }
        let startOfWeek = weekInterval.start
        let endOfWeek = weekInterval.end
        
        let formatter = ISO8601DateFormatter()
        formatter.formatOptions = [.withInternetDateTime, .withFractionalSeconds]
        let startOfWeekString = formatter.string(from: startOfWeek)
        let endOfWeekString = formatter.string(from: endOfWeek)

        let response = try await client
            .from("group_activities")
            .select(count: .exact) // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            .eq("creator_id", value: userId)
            .gte("start_time", value: startOfWeekString)
            .lt("start_time", value: endOfWeekString)
            .execute()
            
        let count = response.count ?? 0
        print("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \(userId) —Å–æ–∑–¥–∞–ª \(count) –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.")
        return count
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –≥—Ä—É–ø–ø–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É `group_activities`.
    /// - Parameter activity: –û–±—ä–µ–∫—Ç `GroupActivity` –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    func createActivity(_ activity: GroupActivity) async throws {
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: \(activity.title)")
        do {
            try await client
                .from("group_activities")
                .insert(activity)
                .execute()
            print("‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: \(error.localizedDescription)")
            throw error
        }
    }

    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ–± —É—á–∞—Å—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—É `activity_participants`.
    /// - Parameters:
    ///   - activityId: UUID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    ///   - userId: –ê–Ω–æ–Ω–∏–º–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    func joinActivity(activityId: UUID, userId: String) async throws {
        print("ü§ù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \(userId) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ \(activityId)")
        
        let participant: [String: String] = [
            "activity_id": activityId.uuidString,
            "user_id": userId
        ]
        
        do {
            try await client
                .from("activity_participants")
                .insert(participant)
                .execute()
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: \(error.localizedDescription)")
            throw error
        }
    }
    
    /// –£–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –µ–µ ID.
    /// - Parameter activityId: UUID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
    func deleteActivity(activityId: UUID) async throws {
        print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å ID: \(activityId)")
        do {
            try await client
                .from("group_activities")
                .delete()
                .eq("id", value: activityId.uuidString) // –£–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ —Å—Ç—Ä–æ–∫—É —É–¥–∞–ª–∏—Ç—å –ø–æ –µ–µ ID
                .execute()
            print("‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: \(error.localizedDescription)")
            throw error
        }
    }
}
