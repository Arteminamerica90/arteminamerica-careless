// –§–∞–π–ª: DataSyncManager.swift
import Foundation

class DataSyncManager {
    
    static let shared = DataSyncManager()
    
    private let userDefaultsKey = "lastExerciseSyncTimestamp"
    private let syncInterval: TimeInterval = 6 * 60 * 60 // 6 —á–∞—Å–æ–≤

    private init() {}
    
    func syncExercisesWithInitialDelay() {
        Task {
            try? await Task.sleep(nanoseconds: 2_000_000_000)
            await syncExercisesIfNeeded()
        }
    }
    
    private func syncExercisesIfNeeded() async {
        let lastSyncDate = UserDefaults.standard.object(forKey: userDefaultsKey) as? Date
        
        if let lastSync = lastSyncDate, Date().timeIntervalSince(lastSync) < syncInterval {
            print("‚úÖ –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã.")
            return
        }
        
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
        
        do {
            let serverExercises: [Exercise] = try await SupabaseManager.shared.client
                .from("exercises")
                .select()
                .execute()
                .value
            
            // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ ---
            await MainActor.run {
                ExerciseCacheManager.shared.saveExercisesToCache(serverExercises)
            }
            
            UserDefaults.standard.set(Date(), forKey: userDefaultsKey)
            
            print("‚úÖ –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(serverExercises.count) —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: \(error.localizedDescription)")
        }
    }
}
