// –§–∞–π–ª: NotificationScheduler.swift
import Foundation
import UserNotifications

class NotificationScheduler {
    
    static let shared = NotificationScheduler()
    private init() {}
    
    func requestAuthorization() {
        let center = UNUserNotificationCenter.current()
        center.requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in
            DispatchQueue.main.async {
                if !granted {
                    UserDefaults.standard.set(false, forKey: "notificationsEnabled")
                }
                print(granted ? "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ." : "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            }
        }
    }
    
    /// –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –¢–û–õ–¨–ö–û –ï–°–õ–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∏–ª –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
    func scheduleNotificationIfNeeded(for workout: TodayActivity, on date: Date) {
        guard UserDefaults.standard.bool(forKey: "notificationsEnabled") else {
            print("‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        }
        
        // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥) ---
        let triggerDate = date.addingTimeInterval(-60 * 60)
        
        guard triggerDate > Date() else {
            print("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º. –û—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        }
        
        let identifier = "\(workout.title)-\(date.timeIntervalSince1970)"
        
        let content = UNMutableNotificationContent()
        // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
        let timeFormatter = DateFormatter()
        timeFormatter.dateFormat = "HH:mm"
        let scheduledTime = timeFormatter.string(from: date)
        
        content.title = "Reminder üî•"
        content.body = "You have a training session scheduled at \(scheduledTime)"
        content.sound = .default
        
        let components = Calendar.current.dateComponents([.year, .month, .day, .hour, .minute, .second], from: triggerDate)
        let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: false)
        
        let request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)
        
        UNUserNotificationCenter.current().add(request) { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \(error.localizedDescription)")
            } else {
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è '\(workout.title)' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ \(triggerDate)")
            }
        }
    }
    
    func cancelNotification(for workout: TodayActivity, on date: Date) {
        let identifier = "\(workout.title)-\(date.timeIntervalSince1970)"
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [identifier])
        print("üóëÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ID \(identifier) –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    }
}
