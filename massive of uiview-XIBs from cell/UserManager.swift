// –§–∞–π–ª: UserManager.swift (–ù–û–í–´–ô –§–ê–ô–õ)
import Foundation

class UserManager {
    
    static let shared = UserManager()
    private let userDefaultsKey = "anonymousUserId"

    private init() {}

    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    /// –ï—Å–ª–∏ ID –µ—â–µ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.
    func getCurrentUserId() -> String {
        let defaults = UserDefaults.standard
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID
        if let existingId = defaults.string(forKey: userDefaultsKey) {
            print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç ID: \(existingId)")
            return existingId
        } else {
            // –ï—Å–ª–∏ ID –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            let newId = UUID().uuidString
            defaults.set(newId, forKey: userDefaultsKey)
            print("üéâ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(newId)")
            return newId
        }
    }
}
