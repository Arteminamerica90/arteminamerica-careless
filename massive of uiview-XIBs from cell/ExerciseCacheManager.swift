// –§–∞–π–ª: ExerciseCacheManager.swift (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
import Foundation
import CoreData
import UIKit

class ExerciseCacheManager {
    static let shared = ExerciseCacheManager()
    
    private lazy var persistentContainer: NSPersistentContainer = {
        var container: NSPersistentContainer!
        
        let initialization = {
            guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {
                fatalError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AppDelegate. –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏.")
            }
            container = appDelegate.persistentContainer
        }
        
        if Thread.isMainThread {
            initialization()
        } else {
            DispatchQueue.main.sync {
                initialization()
            }
        }
        return container
    }()

    private init() {}
    
    func fetchCachedExercises() -> [Exercise] {
        var exercises: [Exercise] = []
        let context = persistentContainer.viewContext
        context.performAndWait {
            let request: NSFetchRequest<CachedExercise> = CachedExercise.fetchRequest()
            do {
                let cachedResults = try context.fetch(request)
                exercises = cachedResults.map { cached in
                    return Exercise(
                        id: Int(cached.id), name: cached.name ?? "", description: cached.exerciseDescription,
                        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤ [String]
                        muscleGroup: cached.muscleGroup as? [String],
                        equipment: cached.equipment as? [String],
                        difficulty: Int(cached.difficulty), imageName: cached.imageName ?? "", videoFilename: cached.videoFilename ?? ""
                    )
                }
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(exercises.count) —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞.")
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞: \(error)")
            }
        }
        return exercises.sorted { $0.name.lowercased() < $1.name.lowercased() }
    }
    
    func saveExercisesToCache(_ exercises: [Exercise]) {
        persistentContainer.performBackgroundTask { context in
            context.mergePolicy = NSMergeByPropertyObjectTrumpMergePolicy
            
            do {
                let deleteRequest: NSFetchRequest<NSFetchRequestResult> = CachedExercise.fetchRequest()
                let deleteBatch = NSBatchDeleteRequest(fetchRequest: deleteRequest)
                try context.execute(deleteBatch)
                
                for exercise in exercises {
                    let cachedExercise = CachedExercise(context: context)
                    cachedExercise.id = Int64(exercise.id)
                    cachedExercise.name = exercise.name
                    cachedExercise.exerciseDescription = exercise.description
                    cachedExercise.difficulty = Int16(exercise.difficulty)
                    cachedExercise.imageName = exercise.imageName
                    cachedExercise.videoFilename = exercise.videoFilename
                    
                    // --- –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º [String] –≤ NSArray –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ---
                    if let muscleGroup = exercise.muscleGroup {
                        cachedExercise.muscleGroup = muscleGroup as NSArray as! [String]
                    }
                    if let equipment = exercise.equipment {
                        cachedExercise.equipment = equipment as NSArray
                    }
                    // ---------------------------------------------------------------------
                }
                
                if context.hasChanges {
                    try context.save()
                    DispatchQueue.main.async {
                        print("üíæ \(exercises.count) —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à.")
                    }
                }
            } catch {
                DispatchQueue.main.async {
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –∫—ç—à: \(error)")
                }
                context.rollback()
            }
        }
    }
}
